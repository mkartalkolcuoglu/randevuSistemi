// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Staff {
  id            String   @id @default(cuid())
  tenantId      String
  firstName     String
  lastName      String
  email         String   @unique
  phone         String?
  position      String
  status        String   @default("active")
  avatar        String?
  salary        Float?
  hireDate      String?
  specializations String? // JSON string for array of specializations
  experience    Int?     // years of experience
  rating        Float?   @default(4.0)
  workingHours  String?  // JSON string for working hours
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("staff")
}

model Customer {
  id          String   @id @default(cuid())
  tenantId    String
  firstName   String
  lastName    String
  email       String
  phone       String?
  birthDate   DateTime?
  gender      String?
  address     String?
  notes       String?
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([tenantId, email])
  @@map("customers")
}

model Service {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String?
  price       Float
  duration    Int      // in minutes
  category    String?
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("services")
}

model Appointment {
  id           String   @id @default(cuid())
  tenantId     String
  customerId   String
  customerName String
  customerPhone String?
  customerEmail String?
  serviceId    String
  serviceName  String
  staffId      String
  staffName    String
  date         String
  time         String
  status       String   @default("scheduled")
  notes        String?
  price        Float?
  duration     Int?     // in minutes
  paymentType  String   @default("cash")
  packageInfo  String?  @db.Text // JSON string containing package usage info
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("appointments")
}

model Task {
  id          String   @id @default(cuid())
  tenantId    String
  title       String
  description String?
  assignedTo  String
  priority    String   @default("medium")
  status      String   @default("pending")
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("tasks")
}

model Settings {
  id               String   @id @default(cuid())
  tenantId         String   @unique
  businessName     String
  businessAddress  String?
  businessPhone    String?
  businessEmail    String?
  workingHours     String?  // JSON string
  notificationSettings String? // JSON string
  paymentSettings  String?  // JSON string
  themeSettings    String?  // JSON string for colors, fonts, etc.
  updatedAt        DateTime @updatedAt
  
  @@map("settings")
}

model Tenant {
  id                  String   @id @default(cuid())
  businessName        String
  slug                String   @unique
  domain              String   @unique
  username            String   @unique
  password            String
  ownerName          String
  ownerEmail         String
  phone              String?
  plan               String   @default("Standard")
  status             String   @default("active")
  address            String?
  businessType       String   @default("other")
  businessDescription String?
  monthlyRevenue     Int      @default(0)
  appointmentCount   Int      @default(0)
  customerCount      Int      @default(0)
  createdAt          DateTime @default(now())
  lastLogin          DateTime?
  
  // JSON fields for complex data
  workingHours       String?  // JSON string
  theme              String?  // JSON string
  
  @@map("tenants")
}

model Product {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String?
  category    String?
  price       Float?
  cost        Float?
  stock       Int      @default(0)
  minStock    Int      @default(0)
  barcode     String?
  sku         String?
  supplier    String?
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("products")
}

model Transaction {
  id              String   @id @default(cuid())
  tenantId        String
  type            String   // 'income' (gelir), 'expense' (gider), 'sale' (satış), 'appointment' (randevu), 'package' (paket satışı)
  amount          Float
  description     String
  paymentType     String?  // 'cash', 'card', 'transfer'
  customerId      String?  // For sales
  customerName    String?
  productId       String?  // For sales
  productName     String?
  quantity        Int?     // For sales
  cost            Float?   // Product cost for profit calculation
  profit          Float?   // Calculated profit (amount - cost)
  appointmentId   String?  // Link to appointment if type is 'appointment'
  packageId       String?  // Link to package if type is 'package'
  date            String   // Transaction date
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("transactions")
}

model Package {
  id          String   @id @default(cuid())
  tenantId    String
  name        String
  description String?
  price       Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  items       PackageItem[]
  customerPackages CustomerPackage[]
  
  @@map("packages")
}

model PackageItem {
  id          String   @id @default(cuid())
  packageId   String
  itemType    String   // 'service' or 'product'
  itemId      String   // serviceId or productId
  itemName    String   // service name or product name
  quantity    Int      // number of sessions/items
  createdAt   DateTime @default(now())
  
  package     Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  
  @@map("package_items")
}

model CustomerPackage {
  id          String   @id @default(cuid())
  customerId  String
  packageId   String
  tenantId    String
  assignedAt  DateTime @default(now())
  expiresAt   DateTime?
  status      String   @default("active") // active, completed, expired
  
  package     Package  @relation(fields: [packageId], references: [id])
  usages      CustomerPackageUsage[]
  
  @@map("customer_packages")
}

model CustomerPackageUsage {
  id                  String   @id @default(cuid())
  customerPackageId   String
  itemType            String   // 'service' or 'product'
  itemId              String
  itemName            String
  totalQuantity       Int      // Starting quantity (e.g., 10)
  usedQuantity        Int      @default(0) // Used (e.g., 3)
  remainingQuantity   Int      // Remaining (e.g., 7)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  customerPackage     CustomerPackage @relation(fields: [customerPackageId], references: [id], onDelete: Cascade)
  
  @@map("customer_package_usage")
}
